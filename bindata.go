// Code generated by go-bindata.
// sources:
// assets/favicon.ico
// assets/index.html
// assets/robots.txt
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsFaviconIco = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x62\x60\x60\x04\x42\x01\x01\x06\x30\xc8\x60\x65\x60\x10\x03\xd2\x1a\x40\x0c\x12\x52\x60\x00\xc9\x73\x40\x24\x19\x19\x10\x00\xca\xfe\xff\xff\x3f\xc3\x28\x18\x05\xa3\x60\x14\x8c\x02\xd2\x01\x20\x00\x00\xff\xff\xe1\xe9\x47\x67\x7e\x05\x00\x00")

func assetsFaviconIcoBytes() ([]byte, error) {
	return bindataRead(
		_assetsFaviconIco,
		"assets/favicon.ico",
	)
}

func assetsFaviconIco() (*asset, error) {
	bytes, err := assetsFaviconIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/favicon.ico", size: 1406, mode: os.FileMode(438), modTime: time.Unix(1459884480, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x55\xd1\x6e\xe3\x36\x10\x7c\x2f\xd0\x7f\x58\x18\x45\x7a\x07\x04\x96\x53\x23\x05\x9a\xea\x7c\x4d\x8b\x16\x45\x9f\x0a\xc4\x05\xda\x47\x8a\x5a\x99\x4c\x28\x2e\xcb\xa5\xaa\x33\xd0\x8f\xbf\x25\x25\x27\xb6\x2f\x09\xe2\x07\x5b\x32\xb9\xb3\xc3\x99\x59\xa9\x36\xa9\x77\x9b\xaf\xbf\xaa\x0d\xaa\x56\x7e\x41\x3e\x75\xb2\xc9\xe1\x86\x31\x6d\x6d\x8f\x34\x24\x50\x0c\x0a\xee\x30\xfe\x67\x35\xd6\xd5\xb4\x2c\x35\xd5\x5c\x54\x37\xd4\xee\x0f\xc5\xe6\xbb\x97\x2b\x65\x6d\xde\x15\xe6\x8b\xfc\xb9\x0b\xa8\x6d\xb7\x87\x64\x10\x54\x4f\x83\x4f\x40\x1d\x24\x41\x80\x77\x2d\x76\x6a\x70\x89\x21\x11\xf4\xd6\x39\xcb\xa8\xc9\xb7\xfc\x1e\xf6\x34\xc0\xa8\x64\x6f\x2e\x63\xe9\x80\x31\x6f\x62\x87\x18\xa0\xc1\x8e\x22\x42\x44\x0e\xb2\xdb\xfa\xdd\xb2\x6e\x22\x54\xc7\x4d\x87\x10\x28\x0a\xf0\xef\xdb\xed\x9f\xb2\xf1\xdf\x01\x59\xee\x46\x9b\x4c\x41\x2c\xed\x1b\x94\xd2\x72\x1b\x94\xfc\x4f\x11\x98\xf4\x03\x26\x10\x0e\x1e\x75\xb2\xe4\x19\xc8\x43\x46\x82\xeb\xab\xd5\xfa\xac\x9e\x51\xf8\x75\xe4\x1c\x8d\xd8\x42\xb3\x17\x2d\x3c\x8e\xce\x7a\xfc\x82\xcf\x3f\x72\x1c\xad\x3c\x28\xc7\x94\xeb\x5a\xa9\x8b\xbd\x4a\xd0\x53\x6b\x3b\x8b\x91\xc1\xd9\x07\x84\x8f\xf7\x4c\xfe\x12\x3e\x6a\xe6\xfc\xad\x9c\x6b\x94\x7e\xf8\x90\x84\xfd\x65\x5e\x94\x2f\xeb\xf3\xe5\xce\x76\x4b\xf8\x0d\xd1\x41\x17\x11\xb3\x34\x03\x23\x8c\x46\x25\xcc\x52\xf1\xd0\xb4\xd4\x2b\xeb\x8f\x84\x24\xba\x3c\xa7\x25\xeb\x5a\x49\x9d\x6c\xfa\x56\x04\x35\x36\xa5\x83\x24\xbd\xfa\x24\xb2\x44\x61\x20\x3d\x8e\x05\x91\x1a\x05\x4d\xa4\x51\x5c\x59\xce\x7e\x57\xd9\xf0\x43\x42\xd6\x9b\xbf\x04\xf2\x17\xc1\x65\xc9\xc4\xfa\xb9\x4c\x1c\xe4\xc8\x9c\x93\xb1\xc5\x7f\x96\x63\xd8\x0e\x34\xc6\x94\x79\x4b\x6f\x31\x4c\x92\x22\xdc\x22\xa8\x10\x40\x09\xc3\xc6\x89\x43\xcf\x19\x7e\xdb\xe6\x1c\x08\x33\x51\xae\xb8\x93\xe3\x29\xa8\x0a\x38\xed\x9d\x74\x51\xbb\xd2\x91\x0d\x8d\x45\x13\x69\x35\xaf\xb1\xc1\xe2\xf9\xe0\xda\x09\x7f\x6a\xc9\x36\xa1\x88\x4b\x3d\x38\x52\x25\x64\x70\xa7\xfa\xc2\x57\x1a\x3d\x26\x41\xc1\x3d\x9f\x93\x49\x4f\xe3\x51\xe2\x1b\x75\x56\x8d\x75\xb4\x21\x65\x26\x4b\xd8\xca\xdf\xd9\x6a\xa0\x90\x55\x2d\xd4\x1a\xcc\x7a\xb4\x13\xf4\xed\x1f\xb7\x7f\x43\xf6\xbf\x68\x93\xfd\x9f\x58\x45\xc9\x8e\xf8\xdb\x63\x32\xd4\x3e\xea\x96\x0f\x25\x9d\xf6\x85\xea\x73\xa6\x84\xcd\x85\x6f\x38\xfc\x78\xee\x54\x19\x8f\x5f\x3f\xa9\x3e\xb8\x73\xb7\x4c\x4a\xe1\xa6\xaa\x64\xda\xe7\xe3\x2c\x2d\x55\x35\xa7\x48\x7e\xb7\xb9\x5e\xad\x56\x75\x35\xdf\xc0\x58\xb4\x9b\x66\x53\x72\x0d\x79\xf5\x64\x9e\xa7\xb6\x6f\x01\xbe\x5a\x71\x0e\xff\xcb\xd8\x57\x2b\x98\x41\x41\xc9\x18\x45\x4c\x43\xf4\x50\x4a\xde\xdc\xc3\x5c\xbf\xd6\x40\xd4\xcc\x89\x13\xf0\x6b\x38\xe1\xff\x24\xdb\xdd\xf4\x9c\x98\x85\x3b\xd5\x6d\x4b\xaf\x29\x71\x73\x4c\x33\xe2\x7c\xf9\x0d\xbc\x43\x6d\x08\x16\x79\xff\x02\x2e\x2e\x66\x88\xd5\x72\xfd\x1e\xfe\x07\xaf\xe1\xe4\x24\xe5\x61\xf4\xe8\x72\x41\x79\xcd\xe7\x20\x7c\x87\xa8\xf1\x06\x6a\x05\x26\x62\xf7\x61\x31\xeb\xb3\x93\xa8\x0d\xcd\x52\x53\x5f\x75\x8a\x73\xca\x7e\xf8\x7e\x7d\xa4\xda\x62\xf3\xc6\x8d\x75\xa5\x36\x27\x06\xfc\xbc\xff\xa2\x59\x92\x60\x27\x79\x66\x64\x90\x7b\x99\x24\x36\x32\xe2\x76\xb7\xd8\xfc\x74\x74\xf7\x04\x54\x57\xf3\x7b\x47\xe4\x9d\xde\x62\x9f\x03\x00\x00\xff\xff\x4f\x1b\x24\x3e\xce\x06\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 1742, mode: os.FileMode(438), modTime: time.Unix(1459884749, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsRobotsTxt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x0a\x2d\x4e\x2d\xd2\x4d\x4c\x4f\xcd\x2b\xb1\x52\xd0\xe2\xe5\x72\xcc\xc9\xc9\x2f\xb7\x52\xd0\x57\xe1\xe5\x72\xc9\x2c\x4e\x84\xf2\x78\xb9\x00\x01\x00\x00\xff\xff\x48\x2d\x5d\x2b\x27\x00\x00\x00")

func assetsRobotsTxtBytes() ([]byte, error) {
	return bindataRead(
		_assetsRobotsTxt,
		"assets/robots.txt",
	)
}

func assetsRobotsTxt() (*asset, error) {
	bytes, err := assetsRobotsTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/robots.txt", size: 39, mode: os.FileMode(438), modTime: time.Unix(1459884480, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/favicon.ico": assetsFaviconIco,
	"assets/index.html": assetsIndexHtml,
	"assets/robots.txt": assetsRobotsTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"favicon.ico": &bintree{assetsFaviconIco, map[string]*bintree{}},
		"index.html": &bintree{assetsIndexHtml, map[string]*bintree{}},
		"robots.txt": &bintree{assetsRobotsTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

